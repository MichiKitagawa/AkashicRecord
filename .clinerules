### **開発ルール (AI用フォーマット)**
---

## **1. 開発ワークフロー**
### **1.1 開発指示書の確認**
#### **目的:**  
次に実装すべき機能を明確にするために、開発指示書と開発記録を確認する。

#### **手順:**  
1. **開発指示書**を確認し、実装すべき機能を特定する。
2. **開発記録**を確認し、既に完了している機能と未実装の機能を特定する。
3. **未実装の機能**をリストアップし、次のタスクとして登録する。

---

### **1.2 ブランチの作成**
#### **目的:**  
未実装の機能ごとに独立したブランチを作成し、開発を管理しやすくする。

#### **手順:**  
1. **未実装の機能に対応するブランチを作成**する。  
   - ブランチ命名規則: `feature/<機能名>` または `fix/<バグ修正名>`  
   - 例: `feature/user-authentication`
2. **ブランチ作成の記録を開発ログに記載**する。

 **開発ログ更新例:**
```markdown
## 開発ログ
- [YYYY-MM-DD] ブランチ作成: `feature/user-authentication`
- 参照指示書: "User Authentication v1.0"
- 予定タスク: JWTトークンの発行、ログインAPIの実装
```

---

### **1.3 開発作業**
#### **目的:**  
機能を実装し、進捗を開発ログに記録する。

#### **手順:**  
1. **実装を開始し、開発中の操作を逐次開発ログに記録**する。  
   - 変更したファイル名
   - 追加/修正した機能の概要
   - 使用したライブラリやアルゴリズム
   - 発生したエラーや試行錯誤の内容
2. **実装を小さな単位でコミット**する。  
   - コミットメッセージは `feat: <機能名>` または `fix: <修正名>` のフォーマットに従う。  
   - 例: `feat: Add JWT authentication`
3. **開発ログにコミット内容を記録**する。

 **開発ログ更新例:**
```markdown
## 開発ログ
- [YYYY-MM-DD] コード変更: `auth.js`
- 実装内容: JWTトークンの発行処理追加
- 使用ライブラリ: jsonwebtoken, bcrypt
- エラー: bcryptのバージョン不整合を修正
```

---

### **1.4 テスト作成**
#### **目的:**  
新しい機能に対する適切なテストを作成し、品質を保証する。

#### **手順:**  
1. **実装に基づきテストを作成**する。  
   - ユニットテスト、統合テスト、E2Eテストのどれを実施するか判断。
   - 例: `tests/authentication.test.js` を作成。
2. **作成したテストを開発ログに記録**する。

 **開発ログ更新例:**
```markdown
## 開発ログ
- [YYYY-MM-DD] JWT認証テスト作成
- テスト対象: `POST /api/login`
- 期待結果: 正常にトークンが発行されること
```

---

### **1.5 テスト実行**
#### **目的:**  
リモート環境（CI/CD）でテストを実行し、機能の正しさを検証する。

#### **手順:**  
1. **ローカルで事前にテストを実行**し、基本的な問題を修正する。
   ```sh
   npm test
   ```
2. **ブランチをリモートにプッシュし、CI/CD環境で自動テストを実行**する。
   ```sh
   git push origin feature/user-authentication
   ```
3. **CI/CDのテスト結果を開発ログに記録**する。

 **開発ログ更新例:**
```markdown
## 開発ログ
- [YYYY-MM-DD] CI/CDテスト実行
- 実行環境: GitHub Actions
- 結果: ✅ PASSED
```

💡 **CI/CDテストが失敗した場合**
- 修正後、再度リモートテストを実行する。
- 失敗した内容と修正内容を開発ログに記録する。

---

### **1.6 開発記録の更新**
#### **目的:**  
テストが成功した機能のみを開発記録に正式に記録する。

#### **手順:**  
1. **リモートテストが成功したら、開発記録に実装内容を追加**する。
2. **開発ログには引き続き全履歴を保持するが、開発記録には完成済みの機能のみを記録**する。

**開発記録更新例:**
```markdown
## 開発記録
- [YYYY-MM-DD] JWT認証機能 完了
- 実装内容: `POST /api/login`
- 使用技術: bcrypt, JWT
- テスト結果: ✅ PASSED
```

---

### **1.7 メインブランチへのマージ**
#### **目的:**  
機能を統合し、開発サイクルを完了する。

#### **手順:**  
1. **プルリクエスト（PR）を作成**し、レビューを受ける。
2. **レビュー後、問題がなければ`main`ブランチにマージ**する。
   ```sh
   git checkout main
   git merge feature/user-authentication
   git push origin main
   ```
3. **マージ後の情報を開発ログに記録**する。

 **開発ログ更新例:**
```markdown
## 開発ログ
- [YYYY-MM-DD] `feature/user-authentication` を `main` にマージ
- 確認済みテスト: `authentication.test.js`
```

---

### **1.8 次の開発指示書の確認**
#### **目的:**  
次の実装に進むため、未実装の機能を把握する。

#### **手順:**  
1. **開発指示書と開発記録を比較し、次の実装を特定**する。
2. **未実装の機能があれば、新しいブランチを作成し、開発サイクルを再開**する。

---